#include "ext.h"#include "z_dsp.h"#include <math.h>#define ABS(x) (((x) > 0) ? (x) : -(x)) #define MAX_N_FEATURES 11#define MAX_N_CLASSES 10  /* e.g. number of instruments */#define N_FEATURES 11      /* actually used */#define FILE_DIALOG 1#define FILE_NAMED 2#define NPOINTS 256#define DEFPERIOD 128#define DEFHITHRESH 200 // 50#define DEFLOTHRESH 6#define DEFMASKTIME 4#define DEFMASKDECAY 0.7#define DEFDEBOUNCEDECAY 0.5 // 0#define DEFMINVEL 7typedef struct _nn{        int index;  // the class number        float dist; // distance to the target}NN;typedef struct _feature{        unsigned long id;        unsigned long symbol_id;        float feature[MAX_N_FEATURES];}FEATURE;typedef void t_clock;typedef void t_outlet;typedef float t_floatarg;#define pd_new newobject#define clock_getsystime() gettime()#define clock_gettimesince(t) (gettime() - t)	// Wrap around? IF#define qrsqrt(x) sqrt( 1.0 / (x))typedef struct _filterspec				// Data Structure for this object{	int s_npoints;	float s_freq;} t_filterspec;static t_filterspec bonk_filters[] =	{{256, 2}, {256, 4}, {256, 6}, {180, 6}, {128, 6},	{90, 6}, {64, 6}, {45, 6}, {32, 6}, {23, 6}, {16, 6}};#define NFILTERS (sizeof(bonk_filters)/sizeof(bonk_filters[0]))typedef struct _filterkernel{	int k_onset;	int k_npoints;	float *k_stuff;} t_filterkernel;static t_filterkernel bonk_filterkernels[NFILTERS];typedef struct _hist{	float h_power;	float h_mask;	float h_before;	int h_countup;} t_hist;typedef struct template{	float t_amp[NFILTERS];} t_template;void makeFeatureVector(FEATURE *database, float *array, int size, int id, int class_id);int find_nn(FEATURE *unknown, int index, FEATURE *database, int size, float *weights, int k);