function [Tr_sm, index] = CleanTr(Freq,Tr)% CleanTr% % [Tr_New, index] = CleanTr(Freq,Tr)%% Smoothing of the reverberation time computed after raw time-frequency % analysis (multiple iterations of EDRanalyse_Iteration)),thus eliminating % non-coherent values. It is used inside the EDRanalyse function.% % Freq   : frequency scale associated with the Tr signal.% Tr     : reverberation time before correction% % Tr_New : reverberation time after correction% index  : vector of indexes where the reverberation time was corrected%% See also : CleanP0,CleanPN, CleanTLindex = [];Tr_sm = [];y = Tr; y = real(y);y = max(y, zeros(size(y)));y = min(y, 10*ones(size(y)));[y, index] = CorrectNaN(y);flim = 0.75*Freq(length(Freq));b_end = find(Freq > flim);b_beg = find(Freq <=flim);Indsup = b_end;Indinf = b_beg;Infvec = y(Indinf);supvec = y(Indsup);moyTr = mean(Tr(b_beg));little_y = y(b_end);vec  = find(little_y > moyTr);index = b_end(vec);sizevec = length(vec);if (isempty(vec))else  Prun = 1;   while(Prun <= length(vec))     	        Pbegin = vec(Prun);     	Pend = vec(Prun);           if (Prun < length(vec))           while((vec(Prun+1) == vec(Prun)+1))                     if(Prun < length(vec))         		Pend = vec(Prun+1);         		Prun = Prun+1;                        if(Prun == length(vec))                             break                        end                     else                        Pend = vec(length(vec));                        break;                     end           end     	else        	Pend = vec(length(vec));     	end    %fprintf('%d\t %d\n', Pbegin,Pend)          if(Pbegin == 1)      		if (Pend == length(Indsup))                        slope = (supvec(Pend)- Infvec(length(Infvec)))/(Pend+2);        		yor = supvec(Pend) - slope*(Pend+1);        		for j = Pbegin:Pend          			supvec(j) = slope*j+yor;        		end      		else        		for j = Pbegin:Pend          			supvec(j) = PowerLog(eps);        		end      		end    	else      		if (Pend == length(Indsup))        		for j = Pbegin:Pend         			supvec(j) = supvec(Pbegin-1);        		end      		else                        slope =  (supvec(Pend+1)-supvec(Pbegin -1))/(Pend-Pbegin+2);       			yor = supvec(Pend+1) - slope*(Pend+1);       			for j = Pbegin:Pend         			supvec(j) = slope*j+yor;       			end    		end   	end            Prun = Prun+1;   endend%y(b_end) = little_y;y(b_end) = supvec;y = max(y, eps*ones(size(y)));Tr_sm = y;