function [TFCTsig, TFCTtime, TFCTfreq,y] = stft(sig, fe, Win, Nfft, Roverlap)% STFT%%     [STFT, STFTtime, STFTfreq] = stft(sig, sr, win, nfft, roverlap)% % Compute the short time Fourier transform of a signal 'sig'. % The beginning of the signal is zero-padded with Nfft/2 zeros% so that the beginning of the signal is not ignored. The result% 'STFT' is a complex matrix, whose lines represents one FFT channel % (isofrequency) and raws one FFT. Two additionnals vectors 'time' and % 'freq' represent the scales associated with STFT. It uses the matlab% function 'specgram'%	% sig      : input signal% sr       : Sampling rate of the signal 'sig'% win      : Vector of the analysis window% nfft     : Number of points in FFT computing;%            must be equal to the length of win% roverlap : Overlap rate of the windows%% STFS     : Matrix of the Short time fourier transform.% time     : Temporal scale associated with the STFT (in s)% freq     : Frequency scale associated with the STFT (in Hz)%% Default  : fe = 1, win : Blackmann-Harris window (order 4), nfft = 1024,%            roverlap = 0.75;%% See also : STFS, SPECGRAMsig = sig(:);Win = Win(:);if (nargin == 5)  sig = [zeros(1, Nfft/2) sig'];  NsampleOverlap = floor(Roverlap*Nfft);    fprintf('Computing short-time Fourier transform\n');  fprintf('Window size : %d, ', Nfft);  fprintf('overlap ratio : %s\n',Roverlap);    [TFCTsig, a.b.y] = specgram(sig, Nfft,[], Win, NsampleOverlap);  Tsize = size(TFCTsig);  TFCTtime = ([1:Tsize(2)]-1)*(Nfft-NsampleOverlap)/fe;  TFCTfreq = ([1: Tsize(1)]-1)*fe/Nfft;elseif (nargin ==1)gg  fprintf('Computing short-time Fourier transform\n');  fprintf('Using default values : Blackman-Harris order 4 window,\n')  fprintf('                       512 points FFT, overlap ratio :0.75\n');  fprintf('Time and frequency scales will be output in samples (no sampling rate)\n');  Nfft = 512;  Roverlap = 3/4;  NsampleOverlap = Nfft*3/4;  Win = harris(512);  sig = [zeros(1, Nfft/2) sig'];     TFCTsig = specgram(sig, Nfft,[], Win, NsampleOverlap);  Tsize = size(TFCTsig);  TFCTtime = [1:Tsize(2)];  TFCTfreq = [1:Tsize(1)];;  else  fprintf('Computing short-time Fourier transform\n');  fprintf('Using default values : Blackman-Harris order 4 window,\n')  fprintf('                       512 points FFT, overlap ratio :0.75\n');     Nfft = 512;  Roverlap = 3/4;  NsampleOverlap = Nfft*3/4;  Win = harris(512);  sig = [zeros(1, Nfft/2) sig'];      TFCTsig = specgram(sig, Nfft,[], Win', NsampleOverlap);  Tsize = size(TFCTsig);  TFCTtime = ([1:Tsize(2)]-1)*(Nfft-NsampleOverlap)/fe;  TFCTfreq = ([1:Tsize(1)]-1)*fe/Nfft;  end