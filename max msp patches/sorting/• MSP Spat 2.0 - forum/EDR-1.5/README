EDR 1-5 README  (11/03/98)--------------EDR 1-5 is a new version of the EDR library for Matlab.  What's in?----------     EDR-1.5 libraries has got the following routines :      CleanP0.m                EDRanalysis_Initialize.m   RI2Spat.m   CleanPN.m                EDRanalysis_Iteration.m    RIdenoising.m   CleanTL.m                Ener2MatSpat.m             sigRead.m   CleanTr.m                fdens.m                    sigWrite.m   CorrectNaN.m             harris.m                   Smooth8va.m   CorrectVal.m             istft.m                    stfs.m   crit2patch.m             MatSpat2crit.m             stft.m   edr.m                    PowerExp.m                 TimeOD.m   EDR2Ener.m               PowerLog.m                  EDRanalysis.m                      A file called 'data.m' is added, as an example for using 'file' mode   (See below).What's new?----------  *New names for functions     Names have been changed in order to be understood more easily.  *Improved input/output functions sigRead and sigWrite    In order to simplify the way to read and write sound files, two new functions    have been implemented : sigRead and sigWrite, which allow to read different    format of sound files, and write vector to them. Different format have been    implemented : AIFF, SND, AU, WAV, RAW, AMS (Ircam room acoustic team).    Only uncompressed data are considered.     NB : sigRead replace the now obsolete 'RIread' function.  *Signal processing functions    A new function RIdenoising allows to "clean" an impulse response    from a corrupting noise, by replacing the noisy part with a synthetic model.     *Bug fixes     It's never too late. Compatibility with Matlab 5.0 has been made     (elimination of obsolete calls). Some functions may not work with Matlab    4.0, but this has not be fully tested  *Use of english language    All names and helps of functions are now in full english : it's all good!    Help for functions have been (vastly) enhanced. *Better flexibility in function call      The use of functions like EDRanalysis is now more versatile : different     kind of calls can be made (different modes): directly with a signal, using      a file name,reading the information in a file. Future versions will allow      batching of an entire directory.      Some functions can be called in a a "easy" way,providing missing arguments     by themselves. *Planning the future    Improvements are always possible : rewriting of certain functions take that    in account, by offering easier extension writing Some notes----------    *The use of the istft functions may cause strange results, if it is used in an    analysis(stft)/transform/synthesis (istft) process. The behavior of   istft and the accuracy of result is related to the kind of transform that has be done    on the signal to be synthezised (theory requires that the impulse response   associated with the transform has a short impulse response in order to    have a good reconstruction).     *If you do the inverse Fourier transform of a signal, some strange values can appear at    the beginning and end of the output signal of istft (windowing effect). To solve    that problem, the end of the outputsignal has been replaced with 0 values.    It is better to add some zeros at the beginning of all processing in order to    have good result. Solutions are being currently investigated.  *The RIdenoising functions which used stft/istft gives satisfying results, for these   two points. The beginning of a restored impulse response (before the direct    signal) has been set to 0 values. The length of the output impulse response   of RIdenoising corresponds to a signal which instant power is superior to   the signal to noise ratio of the coding (16 bits) Using external file for EDRanalysis, RIdenoising, RI2Spat   --------------------------------------------------------- *In 'file' (or 'f') mode parameters of the analysis are read from a file. This file must  end with the .m extension, so it can be executed by Matlab. This file simply declared  variables that will be used. However this variable follow a precise naming convention,  in order to be understood by the analysis Matlab file.The same configuration file   can be used for all three Matlab functions (and for future functions in the EDR library).  An example is (file : 'data.m'):     A_sigName = '../at0f0a3o.inf';    A_nameout = 'myRI.aif';    A_winname = 'harris';    A_nfft = 512;    A_overlap = 0.75;    A_Trev = 200;    A_Nrepeat = 20;    A_Ndelays = 9;    A_Times = [20 40 200];    keepfilter = 'Tr P0 STFTfreq';    The rule is : "the name of the parameters must be preceded by A_, except for the   filter 'keepfilter'".   If a parameter is not specified, it will be automatically get a default value,   except for the filter (see below). *Using filter   Filters are designed to symplify the storage of vectors and matrices computed during    an analysis. It is used only for 'file' (or 'f') mode (and later for 'dir' mode').   A complete analysis can take a lot of memory size; differents signals   can be computed and used.   A filter keeps trace of the information that will be saved to a Matlab (.mat)    file the information, and allows to do selective saving.    Syntax is      keepfilter = 'param1 param2 param3';   The space character between the parameters can be replaced by the following   characters : , or ;.   For example :      keepfilter = 'param1, param2; param3 param4'; is perfectly valid   Name must be 'keepfilter'   The parameters can be choosen in the output parameters list for each concerned functiom.   For example, a filter for RI2SPat would be      keepfilter ='Tr, P0; OD';   If all the parameters are to be saved, syntax is      keepfilter = 'all';    Feedback-------- If you find a bug, please send an e-mail to     Laurent.Cerveau@ircam.fr, Olivier.Warusfel@ircam.frAuthors-------  Laurent Cerveau, Olivier Warusfel, Jean-Marc Jot, Guillaume Vandernot. 