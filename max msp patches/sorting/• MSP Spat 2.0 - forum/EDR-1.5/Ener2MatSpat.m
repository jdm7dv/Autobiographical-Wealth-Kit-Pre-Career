function [Reglages] = Ener2MatSpat(OD, R1, R2, R3, Tr, Freq);% Ener2MatSpat (EDR-1.5)%% [EnerMat] = Ener2MatSpat(OD, R1, R2, R3, Tr, STFTfreq);%% Computes a matrix wich can be used to set the Spatialisateur(TM)% at a low-level. The matrix is a reduction in 3 frequency bandths% of OD, R1, R2, and R3. The last row of EnerMat is a 3 bandths% reduction of the reverberation time.   % % OD : energy for the direct sound (versus frequency)% R1 : energy for the first reflections (versus frequency)% R2 : energy for the cluster(versus frequency)% R3 : energy for the late reverb sound (versus frequency)% Tr : reverberation time (versus frequency)% STFTfreq : frequency scale associated with the data above% % EnerMat : Output matrix (5 rows, 3 columns)%% See also :  EDRanalysis, RI2Spat, Ener2MatSpat, MatSpat2crit, Smooth8va%% OW 28 mai %%%% si on calculait une energie il faudrait appliquer un facteur 2 pour integrer%% les frequences negatives et multiplier par le DeltaF. Ici ce qu'on evalue%% a une valeur d'amplification donc il s'agit plutot d'un moyennage%% des isofrequences sur les bandes considerees.in = [OD; R1; R2; R3];thesize = size(in);Nligne  = thesize(1);Ncol    = thesize(2);for i=1:Nligne  vecin = in(i, :);  vecout(i,:) =  Smooth8va(vecin, Freq);  Out1(i, 1) =  (vecout(i,1)+vecout(i,2))/2;  Out1(i, 2) = (vecout(i,3)+vecout(i,4)+vecout(i,5))/3;  Out1(i, 3) = (vecout(i,6)+vecout(i,7))/2;end%% On cherche une amplification et non une energie donc pas de DeltaF (voir ci-dessus)%%Dektadf%%DeltaF = Freq(2)-Freq(1);%%Out1 = Out1*DeltaF;in = 1./Tr;vecout = Smooth8va(in, Freq);Out2(1) = (vecout(1)+vecout(2))/2;Out2(2) = (vecout(3)+vecout(4)+vecout(5))/3;Out2(3) = (vecout(6)+vecout(7))/2;Reglages = [Out1; 1./Out2];