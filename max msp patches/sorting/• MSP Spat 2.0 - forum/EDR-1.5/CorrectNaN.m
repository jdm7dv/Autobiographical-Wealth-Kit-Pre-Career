function [Yout, Indexes] = CorrectNaN(Yin)% CorrectNaN%% [Yout, index] = CorrectNaN(Yin)%% This function detects NaN values in the signal Yin, and eliminate them% by replacing them with a linear combination of the two nearest non NaN% neighbours ogf the NaN values%% Yin   : signal with NaN values %% Yout  : signal without NaN values% index : vector containing indexes where values have changed% % See also : CorrectValy = Yin;y = real(y);vec = find(isnan(y));Indexes = vec;if (~isempty(vec)) i = 1;  while(i <length(vec)+1)   ParserBegin = vec(i);   ParserEnd = vec(i);   if (i ~=length(vec))          while(vec(i+1)== vec(i)+1)        ParserEnd = vec(i+1);        i = i+1;                if(i == length(vec))           break;           ParserEnd  = vec(length(vec));        end     end   else     ParserEnd = vec(length(vec));   end    if(ParserBegin == 1)      for j = 1: ParserEnd         y(j) = y(ParserEnd+1);      end   else     if(ParserEnd == length(y))      for j = ParserBegin: length(y)        y(j) = y(ParserBegin-1);      end     else       xe= [ParserBegin-1, ParserEnd+1];       ye =[y(ParserBegin-1), y(ParserEnd+1)];       xl = [ ParserBegin:ParserEnd];       yl = spline(xe, ye, xl);       y(ParserBegin:ParserEnd) = yl;     end   end      i = i+1; end endYout= y;