function [sig,time,fe,sigsize, chan]=sigRead(varargin)% SIGREAD%% function [sig,time,sr,sigsize,chans]=sigRead(name,{form,chanNb,prec})% % name     : filename with or without extension. Complete filename must be %            provided (path included). % form     : file format, needed if RIname is provided without extension %              - 'snd': NeXT sound file format%              - 'au' : Sun sound file format (equivalent to NeXT)%              - 'max': NeXT sound issued of Max (due to a bug)%              - 'rif': AMS format. Requires two files file.inf and%                       file.rif%              - 'inf': same as 'rif'%              - 'aif': AIFF format,(or AIFC without compression)%                       (Apple, SGI)%              - 'raw': raw data, requires precision argument. Time %                       and Fe won't be output. Must be there to read%                       raw data%              - 'wav': Wav format (Windows95, Windows 98, Windows NT)%% chanNb  : if the sound file is not a mono one, allows to select a %           channel, otherwise no output is given. If an argument 0 is%           given, a matrix of all channels will be output.% prec    : precision of the data for the 'raw' option : 'int8', 'int16', 'int32'%           'float32', 'float64'%% Parameters form, chanNb and prec are optionnal for many data types%% sig      : read signal% time     : time base asoociated with Sig% fe       : sample rate% sigsize  : number of frames in the file% chan     : number of channel in the file % First available versio around 01 October 1998% 16 October 1998 : bug correction using file in the above directory '../name'% for inf/rif files% 28 octobre 98  : bug correction when path is /u.hector/lala/lolo/sound.snd% 2 Novembre 98 : bug correction to read multichannel AIFF files (not getting% the gright size)% 2 Novembre 98 : bug correction reading rif file : add 'ieee-le' to fopen(.rif) nargchk(1, 4,nargin);error(nargchk(1, 4,nargin));[msg, sigName, sigForm,sigPrec, sigChannel] = sigReadchk(varargin);sig = [];time = [];chan = [];fe =[];sigsize =[];if(~isempty(msg))  sig = [];time = []; fe = 0; sigsize = 0; chan = 0;  error(msg);end  if (sigForm == 'rif')    fprintf('format RIF - AMS\n');    fprintf('Loading signal, file : %s\n', sigName);        if(sigChannel ~= 1)       fprintf('INF/RIF files are only mono; read the default channel\n');    end     msg = [];    path = '';    r = sigName;    idx = 0;    bsflag = 0;    if(strcmp(sigName(1), '/'))      bsflag = 1;    end    while(~isempty(r))      idx = idx+1;      [t r] = strtok(r,'/');    end        r = sigName;    for i=1:idx-1      [t r] = strtok(r,'/');      if(~isempty(path))       path = [path '/' t];      else       path = t;      end    end    if(~isempty(path))       path = [path '/'];       ln = length(r);       kName = r(2:ln);       if(bsflag == 1)         path = ['/' path];       end    else       kName = r;    end      [begstr endstr] = strtok(kName, '.');       	 %Get info from .INF    name_inf=[path begstr '.inf'];    fid=fopen(name_inf,'r','ieee-le');    if (fid ~=-1)      type = fread(fid, 1, 'char');      name = fread(fid ,64, 'char');      dummy = fread(fid, 6, 'char');      dummy = char(dummy);      date = fread(fid, 26, 'char');      date = char(date);      info = fread(fid, 64, 'char');      fe=fread(fid,1,'float32');	  fprintf('WARNING Fe %g Hz, imposed to 8000Hz', fe);	  fe=8000;      coeff=fread(fid,1,'float32');      fread(fid,1,'float');      sigsize=fread(fid,1,'uint32');      sigmin= fread(fid, 1, 'int16');      sigmax = fread(fid, 1, 'int16');      fclose(fid);               % Read the .RIF file         name_rif=[path begstr '.rif'];      fid=fopen(name_rif,'r', 'ieee-le');             if (fid ~=-1)          sig=fread(fid,'int16');          sig=sig.*coeff;          time = ([1:length(sig)]-1)/fe;          fprintf('Sampling Rate : %g Hz\n',fe);          sigsize =length(sig);      else           sig = [];time = [];fe = 0;sigsize = 0;          msg = 'Problem with reading the .rif file';      end     else       sig = []; time = []; fe = 0; sigsize = 0;       msg = 'Problem with reading the .inf file';     end          sig = sig(:)';     time = time(:)';     chan = 1;         if(msg)       error(msg);     end     return;endif((sigForm == 'snd') | (sigForm == 'sau'));   if(sigForm == 'snd')    fprintf('format SND - NeXT sound\n');   else    fprintf('format AU - Sun sound\n');   end   fprintf('Loading signal, file : %s\n',sigName);      msg = [];   fid = fopen(sigName,'r','ieee-be');	   if(fid ~= -1)      chunknum = fread(fid,4, 'char');      chunkletter = char(chunknum)';            if(strcmp(chunkletter,'.snd') == 0)        msg = 'File data doesn''t seem to correspond to given type or suffix.';        sig = []; time = []; fe = 0; chan = 0; sigsize = 0;         fclose(fid);error(msg);        return;      end                 head_lgth = fread(fid,1,'uint32');      data_sigsize = fread(fid,1,'uint32');      encode=fread(fid,1,'uint32');      fe = fread(fid,1,'uint32');      fprintf( 'Sampling Rate %d\n', fe);      channels = fread(fid,1,'uint32');      (head_lgth-24)/4;      dummy = fread(fid,(head_lgth-24)/4,'ulong');               switch(encode)        case 2,          sig = fread(fid,inf,'int8');          sig = sig(2^7-1);          sigsize=length(sig);  	  time = ([1:length(sig)]-1)/fe;        case 3,          sig = fread(fid,inf,'int16');          sig = sig./32767;          sigsize=length(sig);    	  time = ([1:length(sig)]-1)/fe;        case 5,          sig = fread(fid,inf,'int32');          sig = sig/(2^31-1);          sigsize=length(sig);    	  time = ([1:length(sig)]-1)/fe;        case 6,          sig = fread(fid,inf,'float32');          sigsize=length(sig);    	  time = ([1:length(sig)]-1)/fe;        case 7,          sig = fread(fid,inf,'float64');          sigsize=length(sig);    	  time = ([1:length(sig)]-1)/fe;        otherwise,          sig = [];time = []; sigsize = 0; Fe = 0;          msg = 'Data types not considered now (compression or sample size)';       end         if(channels ~= 1)             if(sigChannel > channels)                msg = 'Selected channel not existing';                sig = [];time =[];fe = 0;sigsize =0; chan = 1;             else                if(sigChannel == 0)                  lg = length(sig)/channels                  tsig = zeros(channels, lg);                  sigsize = lg;                  for i =1:channels	            tempindex = [i:2:length(sig)];                    v = sig(tempindex);                    v = v(:)';                    tsig(i, :) = v;                  end                  sig = tsig;                  time = ([1:sigsize]-1)/fe;                else                  lg = length(sig)/channels;                  tempindex = [sigChannel:2:length(sig)];                  sig = sig(tempindex);                  sigsize = length(sig);                  time = ([1:sigsize]-1)/fe;                end             end           else             if(sigChannel ~=1)               fprintf('WARNING : Mono file, channel argument out of range. Use channel 1.\n')             end           end       fclose(fid);   else     msg = 'Problem while reading the file';    end           sig = sig(:)';   time = time(:)';   chan = channels;       if(msg)     error(msg);   end   return;endif (sigForm == 'max')     fprintf('format MAX - SND with a bug\n');     fprintf('Loading signal, file : %s \n',sigName);             fid = fopen(sigName,'r','ieee-be');	     if(fid ~= -1)       entete = fread(fid,7,'ulong');       sig = fread(fid,inf,'int16');       sig=sig/32767;       sigsize = length(sig);       fe=entete(5);       time = ([1:sigsize]-1)/fe;       fclose(fid);       chan = entete(6);                  if(chan ~= 1)          if(sigChannel > channels)              msg = 'Selected channel not existing';              sig = [];time =[];fe = 0;sigsize =0; chan = 1;          else             if(sigChannel == 0)                lg = length(sig)/channels                tsig = zeros(channels, lg);                sigsize = lg;                for i =1:channels	           tempindex = [i:2:length(sig)];                   v = sig(tempindex);                   v = v(:)';                   tsig(i, :) = v;                end                sig = tsig;                time = ([1:sigsize]-1)/fe;              else                lg = length(sig)/channels;                tempindex = [sigChannel:2:length(sig)];                sig = sig(tempindex);                sigsize = length(sig);                time = ([1:sigsize]-1)/fe;               end           end      else         if(sigChannel ~=1)             fprintf('WARNING : Mono file, channel argument out of range. Use channel 1.\n')         end      end   endend   if(sigForm == 'aif')  fprintf('format AIFF/AIFC\n');  fprintf('Loading signal, file : %s \n',sigName);     fid = fopen(sigName,'r','ieee-be');    chan = 1;	   msg = [];  if(fid ~= -1)     flagread = 1;         while(flagread == 1)            chunknum = fread(fid,4, 'char');        chunkletter = char(chunknum)';        chunksize =  fread(fid,1, 'int32');        %fprintf('%s %d\n', chunkletter, chunksize);                 switch(chunkletter)         case 'FORM',           chunk =  fread(fid,4, 'char');           aifchunk = char(chunk)';           if(aifchunk == 'AIFF')               fprintf('format AIFF');               aifformat = 0;                         else              if(aifchunk == 'AIFC')              fprintf('format AIFC');              aifformat = 1;             else               fclose(fid),               sig = [];time =[];fe = 0;sigsize =0;               msg = 'File data doesn''t seem to correspond to given type or suffix.';               flagread = 0;             end           end                       case 'FVER',            fread(fid,1, 'uint32');         case 'COMM',             numchannel = fread(fid,1, 'int16');             chan = numchannel;             numsampleframes = fread(fid,1, 'int32');             samplesize = fread(fid,1, 'int16');             if (~((samplesize == 16)|(samplesize == 32)))                fprintf('Sample size : %d. Not considered now\n',samplesize );             else                 fprintf(', Sample size : %d bits\n',samplesize );             end             sr = fread(fid,80, 'ubit1');             fe = sr';             tfe = fe;             fe = convertfromIEEE(fe);             fprintf('Sampling Rate %d\n', fe);             if(aifformat == 1)               numchunk =  fread(fid,4, 'char');               compchunk = char(numchunk)' ;                      if(compchunk ~='NONE')                 msg = 'Data types not considered now (compression or sample size)';	         sig = [];time =[];fe = 0;sigsize =0, chan = 1;                 fclose(fid);                 return;               else                  x = fread(fid,16, 'char');                  char(x)';               end             end          case 'SSND',            offset =  fread(fid, 1, 'int32');            blocksize =  fread(fid, 1, 'int32');                   switch(samplesize)             case 8,               sig =  fread(fid, inf, 'int8');                    sig = sig/(2^7-1);               sig = sig(1:numsampleframes*numchannel);               sigsize = length(sig);               time = ([1:length(sig)]-1)/fe;              case 16,                sig =  fread(fid, inf, 'int16');                sig = sig/32767;               sig = sig(1:numsampleframes*numchannel);               sigsize = length(sig);               time = ([1:length(sig)]-1)/fe;             case 32,               sig =  fread(fid, inf, 'int32');                    sig = sig/(2^31-1);               sig = sig(1:numsampleframes*numchannel);               sigsize = length(sig);               time = ([1:length(sig)]-1)/fe;             otherwise,              msg = 'Data types not considered now (compression or sample size)';              sig = []; sigsize = 0;              time = []; flagread = 0;            end           if(numchannel ~= 1)             if(sigChannel > numchannel)                msg = 'Selected channel not existing';                sig = [];time =[];fe = 0;sigsize =0; chan = 1;             else                if(sigChannel == 0)                  lg = length(sig)/numchannel;                  tsig = zeros(numchannel, lg);                  sigsize = lg;                  for i =1:numchannel	            tempindex = [i:2:length(sig)];                    v = sig(tempindex);                    v = v(:)';                    tsig(i, :) = v;                  end                  sig = tsig;                  time = ([1:sigsize]-1)/fe;                else                  lg = length(sig)/numchannel;                  tempindex = [sigChannel:2:length(sig)];                  sig = sig(tempindex);                  sigsize = length(sig);                  time = ([1:sigsize]-1)/fe;                end             end           else             if(sigChannel ~=1)               fprintf('WARNING : Mono file, channel argument out of range. Use channel 1.\n')             end           end                         flagread = 0;           fclose(fid);                  otherwise,            %fprintf('%s', chunkletter);            fread(fid, chunksize, 'char');        end     end                 else        msg = 'Error opening file. Maybe you need to check the path or the file name';        sig = [];        time =[];        fe = [];                     sigsize =0;    end        r = size(sig, 1);    c = size(sig, 2);    if (( r == 1) | (c == 1))      sig = sig(:)';    end    time = time(:)';    if(msg)     error(msg);    end    return;endif (strcmp(sigForm, 'wav'))    fprintf('format WAV - Windows\n');    fprintf('Loading signal, file %s \n',sigName);    [ks] = wavread(sigName,'size');    chan = ks(2);    [sig, fe, res] = wavread(sigName);    sig = sig';    sigsize = length(sig);    time = ([1:sigsize]-1)/fe;    if (chan ~=1)     if(sigChannel > chan)        msg = 'Selected channel not existing';        sig = [];time =[];fe = 0;sigsize =0; chan = 1;     else      tsig = sig(sigChannel,:);     end    else      if(sigChannel > chan)          fprintf('Selected channel not existing : mono file will be output\n');       end    end    msg = [];endif (strcmp(sigForm, 'raw'))  fprintf('Raw data\n');  fprintf('Loading signal, %s\n', sigName);     msg = [];    if(isempty(sigPrec))      msg = ['Raw data format needs precision to be opened'];      sig = [];time =[];fe = 0;sigsize =0; chan = 1;      error(msg);      return;  else    fid = fopen(sigName,'r');    sig =  fread(fid, inf, sigPrec);    fclose(fid);    switch(sigPrec)       case 'int8',           sig = sig/(2^7-1);           sigsize  = size(sig);           time = [0:sigsize -1];           fe = 1;       case 'int16',           sig = sig/(2^15-1);           sigsize  = size(sig);           time = [0:sigsize -1];           fe = 1;       case 'int32',           sig = sig/(2^31-1);           sigsize  = size(sig);           time = [0:sigsize -1];           fe = 1;       case 'float32',           sigsize  = size(sig);           time = [0:sigsize -1];           fe = 1;       case 'float64'           sigsize  = size(sig);           time = [0:sigsize -1];           fe = 1;       otherwise,           msg = ['Unsupported data type'];           sig = [];time =[];fe = 0;sigsize =0; chan = 1;           error(msg);           return;    end             if(sigChannel ~= 1)                     lg = length(sig)/numchannel;            tempindex = [sigChannel:2:length(sig)];            sig = sig(tempindex);            sigsize = length(sig);            time = ([1:sigsize]-1)/fe;      % fprintf('Channel selection isn''t understood with raw data\n');     end    msg = [];           end           if(msg)   error(msg)  end  return  end%Helper functions to read AIFF filesfunction [value] = convertfromIEEE(v)bfe = zeros(10, 8);for i=1:10   bfe(i,:) = v((i-1)*8+1:i*8);end    expon =[ bfe(1,:) bfe(2,:)];expon(1) = 0;hiMant =[ bfe(3,:) bfe(4,:) bfe(5,:) bfe(6,:)];loMant =[ bfe(7,:) bfe(8,:) bfe(9,:) bfe(10,:)];fexpon = ar2num(expon);floMant = ar2num(loMant);fhiMant = ar2num(hiMant);  if ((fexpon == 0) & (floMant == 0) & (fhiMant == 0))    value = 0;else   if (fexpon == 32767)    value = Inf  else     fexpon = ar2num(expon);    fexpon = fexpon-16383;        floMant = ar2num(loMant);    fhiMant = ar2num(hiMant);        f = fhiMant *2^(fexpon-31);    fexpon = fexpon -31;    f = f+floMant *2^(fexpon-32);    value = f;   endend function [vf]=ar2num(v)%msb is leftlg = length(v);for i=1:lg  if ((v(i) == 0) | (v(i) == 1))        %nothing    else       vf = NaN;       return;  endendw = fliplr([0:lg-1]);w2 = 2.^w;w2 = w2.*v;vf = sum(w2);function [msg, sigName, sigForm,sigPrec, sigChannel] = sigReadchk(P)lg = length(P);if(lg == 1)    tempname = char(P(1));  if(isempty(tempname))     sigName = [];     sigPrec = [];     sigForm = [];     sigChannel = 0;      msg = 'File name is empty !!';     return;  end    [sigName, sigForm, msg] = getFileType(tempname);  if(~isempty(msg))     sigName = [];     sigPrec = [];     sigForm = [];     sigChannel = 0;  else     sigPrec =[];     sigChannel = 1;  end  returnendif(lg == 2)  tempname = char(P(1));  tempform = char(P(2));    sigChannel = 1;  if(length(tempform)  == 2)    if(tempform == 'au')      tempform = 'sau';    end  end    if(isempty(tempname))     sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;      msg = 'File name is empty !!';     return;  end    [sigName, sigForm, msg] = getFileType(tempname);    if(isempty(tempform))    if(isempty(sigForm))       sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;       msg = 'File name is empty !!';       return;    else      tempform = sigForm;    end  end      if(tempform == 'inf')    tempform = 'rif';  end    if(isempty(sigForm))   sigForm = tempform;   msg = 'No extension. Using given type';   sigPrec =[];   sigChannel = 1;  else   if(~strcmp(sigForm, tempform));    if(((sigForm == 'snd') & (tempform == 'sau'))|((sigForm == 'sau') & (tempform == 'snd'))|((sigForm == 'snd') & (tempform == 'max')))      sigForm = tempform;      sigPrec =[];      sigChannel = 1;    else      msg = 'Specified type and file extension doesn''t correspond';      sigForm = [];      sigPrec =[];      sigChannel = 0;    end   else     sigForm = tempform;     sigPrec =[];     sigChannel = 1;   end end  endif(lg == 3)  tempname = char(P(1));  tempform = char(P(2));  v = P(3);  tempchan = cat(1,v{:});    if(length(tempform)  == 2)    if(tempform == 'au')      tempform = 'sau';    end  end    if(isempty(tempname))     sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;      msg = 'File name is empty !!';     return;  end  [sigName, sigForm, msg] = getFileType(tempname);    if(isempty(tempform))    if(isempty(sigForm))       sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;       msg = 'File name doesn''t correspond to known type; this must be specified';       return;    else      tempform = sigForm;    end  end  if(isempty(tempchan))    sigPrec = [];sigChannel = 0; return;    fprintf('No channel argument specified. Use first channel\n');    sigChannel = 1;  else       sigChannel = tempchan; msg = []; sigPrec = []; return;   end  endif(lg == 4)  tempname = char(P(1));  tempform = char(P(2));  v = P(3);  tempchan = cat(1,v{:});  tempprec = char(P(4));  msg = [];   if(isempty(tempname))     sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;      msg = 'File name is empty !!';     return;  else     sigName = tempname;  end  if (tempform ~= 'raw')     sigName = [];   sigPrec = [];sigForm = [];sigChannel = 0;      msg = 'Precision argument is only for raw data signals';     return;  else    sigForm = tempform;  end   if(isempty(tempchan))     sigChannel = 1;  else     sigChannel = tempchan;  end  switch(tempprec)    case 'int8',      sigPrec = 'int8';    case 'int16',      sigPrec = 'int16';    case 'int32',      sigPrec = 'int32';    case 'float32',      sigPrec = 'float32';    case 'float64',      sigPrec = 'float64';    otherwise,     sigName = [];sigPrec = [];sigForm = [];sigChannel = 0;      msg = 'Unknown kind of precision';   endendfunction [sigName, sigForm,  msg]  = getFileType(inputsigName)    sigName = [];    sigForm = [];       path = '';    r = inputsigName;    idx = 0;    bsflag = 0;    if(strcmp(inputsigName(1), '/'))      bsflag = 1;    end    while(~isempty(r))      idx = idx+1;      [t r] = strtok(r,'/');    end        r = inputsigName;    for i=1:idx-1      [t r] = strtok(r,'/');      if(~isempty(path))       path = [path '/' t];      else       path = t;      end    end    path = [path '/'];    if(bsflag == 1)      path = ['/' path];    end    ln = length(r);    kName = r(2:ln);    [begstr endstr ] = strtok(kName, '.');  if(isempty(endstr) | strcmp(endstr, '.'))     msg = 'Filename has not extension suffix.Specify ''raw'' to use it as raw data';     sigName = inputsigName;     sigForm =[];     return;  end  switch(endstr)     case '.aif',      sigName = inputsigName;msg = [];sigForm = 'aif';       msg =[];      return;   case '.aifc',      sigName = inputsigName;msg = [];sigForm = 'aif';       msg =[];      return;   case '.aiff',      sigName = inputsigName;msg = [];sigForm = 'aif';      msg=[];      return   case '.snd',      sigName = inputsigName;msg = [];sigForm = 'snd';      msg=[];      return;   case '.au',      sigName = inputsigName;msg = [];sigForm = 'sau';      msg=[];      return;   case '.max'      sigName = inputsigName;msg = [];sigForm = 'max';      msg=[];      return;   case '.rif',      sigName = inputsigName;msg = [];sigForm = 'rif';return;   case '.inf',      sigName = inputsigName;msg = [];sigForm = 'rif'; return;   case '.wav',      sigName = inputsigName;msg = [];sigForm = 'wav';      return;   otherwise,      sigName = inputsigName;sigForm = '';      msg='Unknown file type';      return;  end 