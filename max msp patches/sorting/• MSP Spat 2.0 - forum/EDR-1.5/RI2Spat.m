function [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR,FOD,OD,R1,R2,R3,MatSpat,face,omni,crit,fd] =RI2Spat(varargin)% RI2SPAT (EDR-1.5) % [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR,FOD,OD,R1,%         R2,R3,MatSpat,face,omni,crit,fd] = RI2Spat((mode,{submode}, data);%                                      (See explanation below for use)%% Analyses an impulse response, and saves a Max patch named  for configuring a % Spat_OPer module (in Spat-0.2 or Spat-1.x). This analysis is based on the % Energy deccay relief analysis. The results of the analysis can be stored% in a MAT-file (Matlab data)%% The 'mode' parameters allows this function to be called in different ways. % Values can be%         's' or 'straight' : parameters or given directly%         'f' or 'file'     : read the parameters in a file%         'd' or  'dir'     : do the analysis for an entire directory (reserved for %                             future versions)%% +'straight' mode has 2 submodes :%     * 'n' or 'name' : a filename is given with its extension, and then opened %        (for more explanations about reading sound files see sigRead). Only mono %        files are accepted. An example call would be :%         RI2Spat('s', 'n', 'myfilein',{'myfileout',Times,'win_type', nfft, overlap,Ndelays})%%     *'d' or 'data' : data are given directly;%       Data are directly given. These data are : the signal (RI), the time scale%       associated with the signal (Time), and the sampling rate of the signal (sr).%       If one of these 3 data was missing, an error message would be output.%         RI2Spat('s', 'n',RI, RItime,sr,'myfileout',{Times,'win_type', nfft, overlap,Ndelays})%  % +'file' mode allows parameters to be read from a file. Only filenames can%   be stored (no data). In this mode an option to save the result of EDRanalysis%   in a Matlab file (.mat) is permitted. In order to select the data to save, a %   filter can be precised. See the example file 'data.m', and more about%   filters in the 'README' file%         RI2Spat('f', 'filedata.m');%%  +'dir' mode allows to do analysis on all files in a directory. This mode is%    not available in EDR-1.5, but will be implemented in future versions%% Possible input are : % % 'myfilein'  : name of the impulse response file to be analyzed. Must%               have an extension. Obligatory field!% 'myfileout' : name of the output patch file. This name must end with .pat%               otherwise this suffix will be automatically added% Times       : [t1 t2 t3] begin times of R1, R2, R3%	        (in ms, relative to direct sound). Default = [20 40 100]% win_type    : name of the kind of window used for short-tim Fourier transform%               analysis. Choices are 'harris', 'triang', 'bartlett', 'kaiser',%               'blackman','hamming', 'hanning'. Default is 'harris'. % nfft        : number of FFT points; default = 512% overlap     : overlap rate of the windows in STFT; default is 0.75% Ndelays     : number of feedback delays               Default = 8%% %  [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR,FOD,OD,R1,%         R2,R3,MatSpat,face,omni,crit,fd] %% See also : EDRanalysis, EDR2Ener, Ener2MatSpat, MatSpat2crit, fdens, crit2patch	%%% sort out arguments:error(nargchk(1, 15,nargin));[msg, sigName,RI, RItime,sr,sigNameOut,Times,winname,nfft,overlap,Ndelays,saveFlag,keepfilter,modality,submodality] = RI2Spat_Check(varargin);if(msg)  error(msg)endfinalfilter = [];switch(modality)case {'s', 'straight'}, switch(submodality)  case{'n', 'name'},   [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR]=EDRanalysis('s', 'n', sigName,winname, nfft, overlap,Times(3),12);  case{'d', 'data'},    [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR]=EDRanalysis('s', 'd', RI,RItime,sr,winname, nfft, overlap,Times(3),12);  otherwise,    fprintf('Unknown submod. Quitting\n');    return;  endcase{'f', 'file'},   filename = char(varargin(2));   A_Times =[];   A_Ndelays=[];      %Check directory   punktnb = 0;parser = 1;   while(strcmp(filename(parser),'.'))      parser = parser+1;    end      punktnb = parser-1;    if(punktnb ~= 0)      msg = 'Matlab behavior requires you to have the config file in the current directory';      error(msg);    end       %get shortname    [t r] = strtok(filename, '.');    if(isempty(r))      t = filename;    end    eval(t)    if (isempty(A_sigName))        msg = 'No file name for a signal given in the configuration file!';       error(msg);    else      sigName = A_sigName;    end       if(isempty(A_nameout))        [t r] = strtok(A_sigName, '.');       A_nameout = [t .pat];       sigNameOut = A_nameout       fprintf('Using default output name: %s', sigNameOut)     else      nameout = A_nameout;      sigNameOut=A_nameout;    end     blabla=0;    if(isempty(A_Times))     blabla=1;     A_Times = [20 40 100];     %nothing    else       %Checking times       t1 = A_Times(1); t2 = A_Times(2); t3 = A_Times(3);                   if (t3-t2) < ( (t2-t1) * 1.15 ),        fprintf(' times: section R2 too short.')        sug_t3 = t2 + (t2-t1) * 1.15;        fprintf('Using  suggested times: [%g %g %g] \n',t1,t2,sug_t3);        A_Times(3) = sug_t3;       end    end        Times = A_Times;    if(isempty(A_Ndelays))      A_Ndelays = 8;    end    N_delays = 8;        if(~isempty(keepfilter))       saveFlag = 1;    end       if(isempty(saveFlag) | (saveFlag == 0))       saveFlag=0;       keepfilter=[];    else       saveFlag = 1;    end    [finalfilter] = testfilter(keepfilter, sigName);      [Tr,P0,TLim,PNoise,Tbegin,RI,RItime,STFT,STFTfreq,STFTtime, EDR]=EDRanalysis('f',filename);        if(blabla == 1)       fprintf('Using default begin times for R1, R2, R3 : [20 40 100]\n');    end  otherwise,  return;end[FOD,OD,R1,R2,R3] = EDR2Ener(EDR,STFTtime,STFTfreq,Tbegin,Times);[MatSpat] = Ener2MatSpat(OD,R1,R2,R3,Tr,STFTfreq);[face,omni,crit] = MatSpat2crit(MatSpat,0);fd = fdens(MatSpat(5,2),Times(3)-Times(2),Ndelays);[fact] = crit2fact(crit);distance = Tbegin*340;[Result] = fact2patch(sigNameOut,face,omni,fact,Times,fd,Ndelays, distance);if(~isempty(finalfilter)) fprintf('Saving result in impulse response directory\n'); eval(finalfilter);endfunction [msg, sigName,RI, RItime,sr,sigNameOut,A_Times,A_winname,A_nfft,A_overlap,A_Ndelays,saveFlag,keepfilter,modality, submodality] = RI2Spat_Check(P);msg = [];sigName = [];sigNameOut=[];A_Times=[20 40 100];RI = []; RItime = []; sr = [];A_winname='harris'; A_nfft=512; A_overlap=0.75; A_Ndelays =[]; saveFlag=[]; keepfilter =[];modality=[];submodality=[];modality = char(P(1));lp = length(P);if(lp == 1)  msg = 'Mode without data or name leads to nowhere!';  return;endswitch(modality) case {'straight','s'}  submodality = char(P(2));  if(isempty(submodality))     msg = 'In this mode a submode must be given.'     return  end  switch(submodality)     case {'name', 'n'},       fprintf('Call in straight mode, with a filename\n');              %%%%  syntax       %%%%  RI2Spat('s', 'n', 'myfilein','myfileout',{Times,'win_type', nfft, overlap,Ndelays})        if(lp <3)         msg = 'Some essential data are forgotten for this mode';         return;       end       sigName = char(P(3));       if (isempty(sigName))         msg = 'You must specify a name in name mode, you bugger!';         return;       end              if(lp >=4)         sigNameOut = char(P(4));         if (isempty(sigNameOut))          [t r] = strtok(sigName, '.');          sigNameOut = [t '.pat'];          fprintf('No output name provided. Default name will be used : %s\n', sigNameOut);         end       else        [t r] = strtok(sigName, '.');          sigNameOut = [t '.pat'];          fprintf('No output name provided. Default name will be used : %s\n', sigNameOut);       end             if(lp >=5)         v = P(5); A_Times = cat(1,v{:});         if(isempty(A_Times))            fprintf('Using default begin times for R1, R2, R3 : [20 40 100]\n');         else           %Checking times            t1 = A_Times(1); t2 = A_Times(2); t3 = A_Times(3);                        if (t3-t2) < ( (t2-t1) * 1.15 ),                 fprintf(' times: section R2 too short.')                 sug_t3 = t2 + (t2-t1) * 1.15;                 fprintf('Using  suggested times: [%g %g %g] \n',t1,t2,sug_t3);                 A_Times(3) = sug_t3;            end         end       else         fprintf('Using default begin times for R1, R2, R3 : [20 40 100]\n');       end           if(lp >=6) A_winname = char(P(6)); else,A_winname = 'harris';end       if(isempty(A_winname)) A_winname = 'harris';end       if(lp >=7) v = P(7); A_nfft = cat(1, v{:}); else A_nfft = 512; end        if(isempty(A_nfft)) A_nfft = 512; end        if(lp >=8) v = P(8); A_overlap = cat(1, v{:}); else A_overlap = 0.75; end        if(isempty(A_overlap)) A_overlap = 0.75; end       if(lp >=9) v = P(9); A_Ndelays = cat(1, v{:}); else A_Ndelays = 8; end            if(isempty(A_Ndelays)) A_Ndelays = 8; end       if(lp >=10) fprintf('Warning : Too many arguments for this mode. Some will be ignored.\n');end       case {'data', 'd'},       %%%%  syntax       %%%%  RI2Spat('s', 'n', RI, RItime, sr,'myfileout',{Times,'win_type', nfft, overlap,Ndelays})                fprintf('Call in straight mode, with some data\n');       if(lp <5)         msg = 'Some essential data are forgotten for this mode';         return;       end       v = P(3); RI = cat(1,v{:});       if(isempty(RI)) msg ='RI input vector is empty!'; return; end       v = P(4); RItime = cat(1, v{:});       if(isempty(RItime)) msg ='RItime input vector is empty!'; return;end       v = P(5); sr = cat(1,v{:});        if(isempty(sr)) msg ='Sampling rate field is empty!'; return;end              if(lp >=6)         sigNameOut = char(P(6));         if (isempty(sigNameOut))          [t r] = strtok(sigName, '.');          sigNameOut = [t '.pat'];          fprintf('No output name provided. Default name will be used : %s\n', sigNameOut);         end       else        [t r] = strtok(sigName, '.');          sigNameOut = [t '.pat'];          fprintf('No output name provided. Default name will be used : %s\n', sigNameOut);       end        if(lp >=7)         v = P(7); A_Times = cat(1,v{:});         if(isempty(A_Times))            fprintf('Using default begin times for R1, R2, R3 : [20 40 100]\n');         else           %Checking times            t1 = A_Times(1); t2 = A_Times(2); t3 = A_Times(3);                        if (t3-t2) < ( (t2-t1) * 1.15 ),                 fprintf(' times: section R2 too short.')                 sug_t3 = t2 + (t2-t1) * 1.15;                 fprintf('Using  suggested times: [%g %g %g] \n',t1,t2,sug_t3);                 A_Times(3) = sug_t3;            end         end       else         fprintf('Using default begin times for R1, R2, R3 : [20 40 100]\n');       end       if(lp >=8) A_winname = char(P(8)); else,A_winname = 'harris';end       if(isempty(A_winname)) A_winname = 'harris';end       if(lp >=9) v = P(9); A_nfft = cat(1, v{:}); else A_nfft = 512; end        if(isempty(A_nfft)) A_nfft = 512; end        if(lp >=10) v = P(10); A_overlap = cat(1, v{:}); else A_overlap = 0.75; end        if(isempty(A_overlap)) A_overlap = 0.75; end       if(lp >=11) v = P(11); A_Ndelays = cat(1, v{:}); else A_Ndelays = 8; end            if(isempty(A_Ndelays)) A_Ndelays = 8; end       if(lp >=12) fprintf('Warning : Too many arguments for this mode. Some will be ignored.\n');end    otherwise,      msg = 'Unknown submod';    end   case {'file','f'}          return; %due to a strange feature about reading file in subfunctions   case {'dir','d'}   msg ='Feature not yet implemented'; otherwise,   msg = 'Unknown mode';endfunction [finalfilter] = testfilter(thekeepfilter, sigName)finalfilter = []; path = '';r = inputsigName;idx = 0;bsflag = 0;    if(strcmp(inputsigName(1), '/'))     bsflag = 1;endwhile(~isempty(r))  idx = idx+1;  [t r] = strtok(r,'/');end    r = inputsigName;for i=1:idx-1  [t r] = strtok(r,'/');  if(~isempty(path))     path = [path '/' t];  else     path = t;  endendif(~isempty(path))   path = [path '/'];   ln = length(r);   kName = r(2:ln)   if(bsflag == 1)     path = ['/' path]   endelse       kName = r;end[begstr endstr ] = strtok(kName, '.');matname = [path begstr '.mat'];r = thekeepfilter;finalfilter = ['save ' matname ];tempffilter = finalfilter; allflag = 0;while(~isempty(r)) [t r] = strtok(r,' ,;'); f = deblank(t); switch(f)  case 'Tr', finalfilter = [finalfilter ' Tr'];  case 'P0', finalfilter = [finalfilter ' P0'];  case 'TLim', finalfilter = [finalfilter ' TLim'];  case 'PNoise', finalfilter = [finalfilter ' PNoise'];  case 'Tbegin', finalfilter = [finalfilter ' Tbegin'];  case 'RI', finalfilter = [finalfilter ' RI'];  case 'RItime', finalfilter = [finalfilter ' RItime'];  case 'STFT', finalfilter = [finalfilter ' STFT'];  case 'STFTfreq', finalfilter = [finalfilter ' STFTfreq'];  case 'STFTtime', finalfilter = [finalfilter ' STFTtime'];  case 'FOD',finalfilter = [finalfilter ' FOD'];  case 'OD',finalfilter = [finalfilter ' OD'];  case 'R1',finalfilter = [finalfilter ' R1'];  case 'R2',finalfilter = [finalfilter ' R2'];  case 'R3',finalfilter = [finalfilter ' R3'];  case 'MatSpat',finalfilter = [finalfilter ' MatSpat'];  case 'face',finalfilter = [finalfilter ' face'];  case 'omni',finalfilter = [finalfilter ' omni'];  case 'crit',finalfilter = [finalfilter ' crit'];  case 'fd',finalfilter = [finalfilter ' fd'];  case 'EDR', finalfilter = [finalfilter ' EDR'];  case 'all', allflag = 1;break; endendif(strcmp(finalfilter, tempffilter)) if(allflag == 1)    else   finalfilter = []; endend