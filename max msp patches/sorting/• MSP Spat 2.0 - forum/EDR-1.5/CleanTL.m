function [NTLim] = CleanTL(TLim,Tr,PNoise, P0)% CleanTL% %      [TLim_New] = CleanTL(TLim,Tr,PNoise, P0)%% Smoothing of the limit time computed after raw time-frequency analysis % (multiple iterations of EDRanalyse_Iteration)),thus eliminating non-coherent % values. % % TLim     : limit time before smoothing% Tr       : reverberation time before smoothing% P0       : Initial Power Spectrum before smoothing% PNoise   : energy of the corrupting noise before smoothing% % TLim_New : Corrected reverberation time% index : vector of indexes where the reverberation time was corrected%% See also : CleanP0,CleanPN, CleanTr TLim2 = -Tr.*log10(PNoise./P0)/6;y = 100*(TLim-TLim2)./TLim; y = real(y);vec = find(y >50);Indexes = vec;y = TLim;if (vec ~= []) i = 1;  while(i <length(vec)+1)   ParserBegin = vec(i);   ParserEnd = vec(i);   if (i ~=length(vec))     while(vec(i+1)== vec(i)+1)       ParserEnd = vec(i+1);       i = i+1;       if(i == length(vec))         ParserEnd  = length(vec);       end     end   else     ParserEnd = vec(length(vec));   end       %fprintf('Begin : %d, End %d\n',ParserBegin, ParserEnd)        if(ParserBegin == 1)      for j = 1: ParserEnd        y(j) = y(ParserEnd+1);      end   else     if(ParserEnd == length(y))      for j = ParserBegin: length(y)       y(j) = y(ParserBegin-1);      end     else       xe= [ParserBegin-1, ParserEnd+1];       ye =[y(ParserBegin-1), y(ParserEnd+1)];       xl = [ ParserBegin:ParserEnd];       yl = spline(xe, ye, xl);       y(ParserBegin:ParserEnd) = yl;     end   end         i = i+1; end endNTLim = y;PNoise*10^(6*(TL/Tr));