function [Tr, P0, PNoise, Tlim, Error, EDRval, ResVal] = EDRanalysis_Iteration(ETC,ETCtime,Tr, P0, PNoise,Nfft, R_overlap)% EDRanalysis_Iteration%% [Tr, P0, PNoise, Tlim, Error,  EDRval, ResVal] = %                     EDRanalysis_Iteration(ETC, ETCtime,Tr, P0, PNoise, nfft, roverlap)%% Compute a simple iteration in a EDR analysis process. Given a STFT (ETC) channel and% initial values for Tr, P0 and PNoise, a new estimation of parameters Tr and P0 is% made by substracting the noise (PNoise) and integrating the result (Energy Decay% Curve). Using these new values, a new value of PNoise is estimated. TLim is defined% as the time where the energy level of corrupting noise is equal at the energy level% of the useful signal. An error is computed, as the quadratic difference between% the STFT Channel (ETC) and the theoretical curve obtained using the estimated parameters% (exponential decreasing curve ETC=P0*exp(-60/Tr)).%% In order to have better estimation, only the diffuse part of the ETC should be% passed to this routine (pre-elimination of the first reflections, ETC is truncated).%% ETC     : channel of the short-time Fourier transform of the signal, with first%           reflections eliminated% ETCtime : corresponding time scale% Tr      : Value of Tr before the iteration % P0      : Value of P0 (Initial Power Spectrum) before the iteration% PNoise  : Value of the energy of the corrupting noise before the iteration% nfft    : number of points used in the FFT for the short-time Fourier transform% roverlap: overlap rate of the windows during STFT%% Tr      : Value of Tr after the iteration% P0      : Value of P0 (Initial Power Spectrum) after the iteration% PNoise  : Value of the energy of the corrupting noise after the iteration% Tlim    : Corresponding limit Time% Error   : error between the ETC signal and a theoretical signal computed%           with the new values of Tr, P0 and PNoise% EDRVal  : value of the origin of the Energy Decay Curve for the channel% ResVal  : computing error (used by the smoothing function CleanP0)% % See also : EDRanalysis_Initialize, EDRanalysis, edr, stft.OldTr = Tr;OldP0 = P0;OldPN = PNoise;%Preparation; rajouter partie a begintimeEndTime = ETCtime(length(ETCtime));DeltaTime = ETCtime(2)-ETCtime(1);Delta = Nfft*(1-R_overlap);if (P0 <= 0 )    P0 = eps;endif (P0 == Inf)  P0 = realmax;end% Determination du temps limite et separation des deux partiesif (PNoise == 0)  Tlim = EndTime+DeltaTime;else  Tlim = -Tr*log10(PNoise/P0)/6;  Tlim = max(Tlim, ETCtime(1)+3*DeltaTime);%  endendTlim = max(Tlim, 2*DeltaTime);if isreal(Tlim) %nothingelse fprintf('Tr %f, P0 %f, PNoise %13.11f, Tlim %f\n', Tr, P0, PNoise, Tlim);endif Tlim > EndTime    SigIndex = [1:length(ETCtime)];  SigTime = ETCtime;  PNoise = 0;else    NoiseIndex= find(ETCtime>= Tlim);  NoiseTime = ETCtime(NoiseIndex);      if(NoiseIndex(1) == 1)     u = [2:length(NoiseIndex)];     NoiseIndex = NoiseIndex(u);     SigIndex = [1];     SigTime = ETCtime(SigIndex);  else       SigIndex = [1:NoiseIndex(1)-1];     SigTime = ETCtime(SigIndex);  end    %Reestimation du bruit  a = -60/Tr;  Pol = [a PowerLog(P0)];  SigTheoVec = PowerExp(polyval(Pol,NoiseTime));  PNoise = mean(ETC(NoiseIndex)-SigTheoVec);    PNoise = max(PNoise,0);end% Calcul du reliefresidu = P0*Tr*exp(-6*log(10)*(EndTime+DeltaTime)/Tr)/(6*log(10));EDR = edr(Nfft, R_overlap, ETC,ETCtime,PNoise);NonValid = find(EDR == 0);EDR = EDR+residu;% estimation Tr et P0% Par regression et utilisation des proprietes du reliefif ~isempty(NonValid)   SigIndex = [SigIndex(1): min(NonValid(1)-1, SigIndex(length(SigIndex)))];   if (length(SigIndex) <= 1)      SigIndex = [1:3];   endendSigTime = ETCtime(SigIndex);SigVec = PowerLog(EDR(SigIndex));%plot(SigTime,SigVec);%pause;Pol=polyfit(SigTime, SigVec,1);if (Pol(1) ~= 0)  Tr = -60/Pol(1); endif (Tr<0)   Tr = OldTr;   P0 = OldP0;   PNoise = OldPN;endcoeff = 1-exp(-6*log(10)*DeltaTime/Tr);P0 = PowerExp(Pol(2))*coeff/Delta - residu; %(tient compte de l'erreur d'integration)EDRval = PowerExp(Pol(2));ResVal = residu;% Calcul de l''erreurPol2 = [-60/Tr PowerLog(P0)];VecError = ETC(SigIndex) - PowerExp(polyval(Pol2, SigTime));Error = (norm(VecError)^2)/length(VecError);