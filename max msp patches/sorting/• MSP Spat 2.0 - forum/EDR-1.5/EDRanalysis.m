function [Tr,P0,TLim,PNoise,Tbegin,RI, RItime,STFS,STFSfreq, STFStime,EDR]= EDRanalysis(varargin)% EDRanalysis (EDR-1.5)  %% [Tr,P0,TLim,PNoise,Tbegin,Sig,Sigtime,STFS,STFSfreq,STFStime, EDR] = %                                   EDRanalysis(mode,{submode}, data);%                                      (See explanation below for use)% % Computes a complete time-frequency analysis of a signal (Room Impulse response % for example) using decay relief properties. The signal is supposed to be the sum % of am exponential decreasing part and a corrupting noise. A theoretical model for % the short-time Fourier transform of the signal is first computed and then the % following parameters are estimated for each frequency%       - Tr     : slope in seconde (reverberation time), versus frequency%       - P0     : Initial Power Spectrum versus frequency%       - PNoise : Energy of the corrupting noise%       - TLim   : Limit time defined as the time where the level of the signal is %                  equal to the level of corrupting noise% % The 'mode' parameters allows this function to be called in different ways. % Values can be%         's' or 'straight' : parameters or given directly%         'f' or 'file'     : read the parameters in a file%         'd' or  'dir'     : do the analysis for an entire directory (reserved for %                             future versions)%% +'straight' mode has 2 submodes :%     * 'n' or 'name' : a filename is given with its extension, and then opened %        (for more explanations about reading sound files see sigRead). Only mono %        files are accepted. An example call would be :%          EDRanalysis('s', 'n', 'myfile.aif',{'win_type', nfft, overlap,Trev, NRepeat}) %%     *'d' or 'data' : data are given directly;%       Data are directly given. These data are : the signal (Sig), the time scale%       associated with the signal (Time), and the sampling rate of the signal (sr).%       If one of these 3 data was missing, an error message would be output.%          EDRanalysis('s', 'd', Sig,Time, sr,{'win_type', nfft overlap , Trev, NRepeat}) %  % +'file' mode allows parameters to be read from a file. Only filenames can%   be stored (no data). In this mode an option to save the result of EDRanalysis%   in a Matlab file (.mat) is permitted. In order to select the data to save, a %   filter can be precised. See the example file 'data.m', and more about%   filters in the 'README' file%          EDRanalysis('f','filedata.m'); %%  +'dir' mode allows to do analysis on all files in a directory. This mode is%    not available in EDR-1.5, but will be implemented in future versions% % Possible input are : % % 'filein' :  name  of thefile containing the signal to be analyzed%             Must have an extension. Obligatory field!% win_type : name of the kind of window used for short-time Fourier transform%            analysis. Choices are 'harris', 'triang', 'bartlett', 'kaiser','blackman'.%            'hamming', 'hanning'. Default is 'harris'. % nfft     : number of FFT points; default = 512% overlap  : overlap rate of the windows in STFS; default is 0.75% Trev     : time (ms) where the reverberation begins (referenced to direct sound)%            default is 100 ms    % Nrepeat  : number of iterations in the computing process (default is 12)%% Output are : % Tr       : reverberation time (versus frequency)% P0       : initial Power Spectrum (versus frequency)% TLim     : limit time (Noise level = Signal level)% PNoise   : noise level (versus frequency)% Tbegin   : arrival time of the direct sound% Sig      : signal to be analyzed% Sigtime  : time scale corresponding to Sig% STFS     : Short time Fourier spectrum of the signal% STFSFreq : frequency scale associated with STFS% STFStime : temporal scale associated with STFS% EDR      : Energy Decay Relief%% See also : EDRanalysis_Initialize, EDRanalysis_Iteration, edr, STFS, RI2Spaterror(nargchk(1, 15,nargin));Tr=[];P0=[];TLim=[];PNoise=[];Tbegin=[];STFS=[];STFSfreq=[]; STFStime=[];EDR =[];ResVal =[];FalseIndexes = [];finalfilter = [];[msg, sigName,RI, RItime,sr,wintype,nfft,overlap, Trev, Nrepeat, saveFlag, keepfilter, modality] = EDRanal_Check(varargin);if(strcmp(modality, 'file') | strcmp(modality , 'f'))    filename = char(varargin(2));    A_nfft = []; A_winname = []; A_overlap = []; A_Trev = []; A_Nrepeat = [];    A_sigName =[];      %Check directory    punktnb = 0;parser = 1;    while(strcmp(filename(parser),'.'))      parser = parser+1;    end      punktnb = parser-1;    if(punktnb ~= 0)      msg = 'Matlab behavior requires you to have the config file in the current directory';      error(msg);    end       %get shortname    [t r] = strtok(filename, '.');    if(isempty(r))      t = filename;    end    eval(t)    if (isempty(A_sigName))        msg = 'No file name for a signal given in the configuration file!';    else      sigName = A_sigName;    end        if(isempty(A_winname)) A_winname = 'harris';end    if(isempty(A_nfft)) A_nfft = 512; end    if(isempty(A_overlap)) A_overlap = 0.75; end    if(isempty(A_Trev)) A_Trev = 100; end    if(isempty(A_Nrepeat)) A_Nrepeat = 12; end     if(~isempty(keepfilter))        saveFlag = 1;    end       if(isempty(saveFlag) | (saveFlag == 0))       saveFlag=0;       keepfilter=[];    else       saveFlag = 1;    end   [finalfilter] = testfilter(keepfilter, sigName);   wintype =  A_winname; nfft = A_nfft; overlap = A_overlap;    Trev = A_Trev; Nrepeat = A_Nrepeat;endif(~isempty(msg))  Tr=[];P0=[];TLim =[];PNoise=[]; Freq=[]; STFS =[]; STFStime = []; Tbegin =[];EDR =[];  error(msg)else %  nothingendif (isempty(RI))  if(~isempty(sigName));      [RI, RItime,sr, long] = sigRead(sigName);  else       Tr=[];P0=[];TLim =[];PNoise=[]; Freq=[]; STFS =[]; STFStime = []; Tbegin =[];EDR =[];       msg = 'Error : No data or name for input signal is given!';       error(msg);   endendswitch(wintype)  case 'kaiser'   exstring = [wintype '(' num2str(nfft) ',10)'] ;  otherwise   exstring = [wintype '(' num2str(nfft) ')'];endwin = eval(exstring);S = size(win);if(S(1)== 1)  win = win';end% Finding the direct signal time[ODtime, ODtimesample]=TimeOD(RI, sr);Tbegin = ODtime;beginTime = ODtime+0.001*Trev;%Calcul du SFCT bien norme[STFS, STFStime, STFSfreq]=stfs(RI, sr, win, nfft, overlap);Freq = STFSfreq;% Calcul des parametres de sortieIndex= find(STFStime>= beginTime);Time = STFStime(Index);fprintf('Beginning analysis with %d iterations\n',Nrepeat);fprintf('Reverberation time arrival : %d\n', Trev);    for j = 1: (length(STFSfreq)) % fprintf('Computation for frequency %d\r',j); Chan =  STFS(j,:); Chan = Chan(Index);  [Tr(j), P0(j), PNoise(j), Error(j)] = EDRanalysis_Initialize(Chan,Time,10, nfft,overlap); %% Recursive loop	 i = 1; while i<Nrepeat+1     OldError = Error(j);    [Tr(j), P0(j), PNoise(j), TLim(j), Error(j), EDR(j), ResVal(j)] = EDRanalysis_Iteration(Chan,Time,Tr(j), P0(j), PNoise(j), nfft,overlap);    DeltaError(i,j) = abs(100*(OldError-Error(j))/Error(j));    i=i+1; endendfprintf('\n');%%PostProcessing[Tr, FalseIndexes] = CleanTr(Freq,Tr);Tr = CorrectVal(Tr, eps);Tr = CorrectVal(Tr, 0);Tr = CorrectNaN(Tr);EDR = CorrectNaN(EDR);ResVal = CorrectNaN(ResVal);PNoise = CleanPN(PNoise);[P0, FalseIndexes] = CleanP0(Freq,P0, Tr,FalseIndexes, EDR, ResVal);P0 = max(P0, PNoise);TLim = -Tr.*log10(PNoise./P0)/6;TLim = CorrectVal(TLim,0);%EDR computingfprintf('Computing EDR\n');[EDR] = edr(nfft,overlap,STFS,STFStime,PNoise,P0,Tr,TLim);if(~isempty(finalfilter)) fprintf('Saving result in signal directory\n'); eval(finalfilter);end%%get the parametersfunction [msg, sigName, sig, time, sr,A_winname, A_nfft, A_overlap, A_Trev, Nrepeat, saveFlag, keepFilter, modality] = EDRanal_Check(P);msg = [];sig = []; time = []; sr = [];sigName=[];; A_winname=[]; A_nfft=[]; A_overlap=[]; A_Trev=[]; Nrepeat=[]; saveFlag=[]; keepFilter =[];modality = char(P(1));lp = length(P);if(lp == 1)  msg = 'Mode without data leads to nowhere!';  data=[]; A_winname=[]; A_nfft=[]; A_overlap=[]; A_Trev=[]; Nrepeat=[]; saveFlag=[]; keepFilter =[];  return;endswitch(modality) case {'straight','s'}  submodality = char(P(2));  switch(submodality)     case {'name', 'n'},       fprintf('Call in straight mode, with a filename\n');       if(lp <3)         msg = 'Some essential data are forgotten for this mode';         return;       end       sigName = char(P(3));       if (isempty(sigName))         msg = 'You must specify a name in name mode, you bugger!';         return;       end       if(lp >=4) A_winname = char(P(4)); else,A_winname = 'harris';end       if(isempty(A_winname)) A_winname = 'harris';end       if(lp >=5) v = P(5); A_nfft = cat(1, v{:}); else A_nfft = 512; end        if(isempty(A_nfft)) A_nfft = 512; end        if(lp >=6) v = P(6); A_overlap = cat(1, v{:}); else A_overlap = 0.75; end        if(isempty(A_overlap)) A_overlap = 0.75; end       if(lp >=7) v = P(7); A_Trev = cat(1, v{:}); else A_Trev = 100; end       if(isempty(A_Trev)) A_Trev = 100; end       if(lp >=8) v = P(8); Nrepeat = cat(1, v{:}); else Nrepeat = 12; end       if(isempty(Nrepeat)) Nrepeat = 12; end       if(lp >=9) fprintf('Warning : Too many arguments for this mode. Some will be ignored.\n');end    case {'data', 'd'},       fprintf('Call in straight mode, with some data\n');       if(lp <5)         msg = 'Some essential data are forgotten for this mode';         return;       end       v = P(3); sig = cat(1,v{:});       v = P(4); time = cat(1, v{:});       v = P(5); sr = cat(1,v{:});              if(lp >=6) A_winname = char(P(6)); else A_winname = 'harris';end       if(isempty(A_winname)) A_winname = 'harris';end       if(lp >=7) v = P(7); A_nfft = cat(1, v{:}); else A_nfft = 512; end        if(isempty(A_nfft)) A_nfft = 512; end       if(lp >=8) v = P(8); A_overlap = cat(1, v{:}); else A_overlap = 0.75; end        if(isempty(A_overlap)) A_overlap = 0.75; end       if(lp >=9) v = P(9); A_Trev = cat(1, v{:}); else A_Trev = 100; end       if(isempty(A_Trev)) A_Trev = 100; end       if(lp >=10) v = P(10); Nrepeat = cat(1, v{:}); else Nrepeat = 12; end       if(isempty(Nrepeat)) Nrepeat = 12; end       if(lp >=11) fprintf('Too many arguments for this mode. Some will be ignored.\n');end       if(isempty(sig) | isempty(time) | isempty(sr))            msg = 'Some essential data for this mode are missing.';            return;       end    otherwise,      msg = 'Unknown submod';    end   case {'file','f'}     fprintf('Call in file mode\n');     return; %due to a strange feature about reading file in subfunctions   case {'dir','d'}   msg ='Feature not yet implemented'; otherwise,   msg = 'Unknown mode';endfunction [finalfilter] = testfilter(thekeepfilter, sigName)finalfilter = []; %[Tr,P0,TLim,PNoise, Tbegin,RI,RItime,RIsynt, STFS, STFSfreq, STFStime,EDR]path = '';r = inputsigName;idx = 0;bsflag = 0;    if(strcmp(inputsigName(1), '/'))     bsflag = 1;endwhile(~isempty(r))  idx = idx+1;  [t r] = strtok(r,'/');end    r = inputsigName;for i=1:idx-1  [t r] = strtok(r,'/');  if(~isempty(path))     path = [path '/' t];  else     path = t;  endendif(~isempty(path))   path = [path '/'];   ln = length(r);   kName = r(2:ln)   if(bsflag == 1)     path = ['/' path]   endelse       kName = r;end [begstr endstr ] = strtok(kName, '.');matname = [path begstr '.mat'];r = thekeepfilter;finalfilter = ['save ' matname ];tempffilter = finalfilter; allflag = 0;while(~isempty(r)) [t r] = strtok(r,' ,;'); f = deblank(t); switch(f)  case 'Tr', finalfilter = [finalfilter ' Tr'];  case 'P0', finalfilter = [finalfilter ' P0'];  case 'TLim', finalfilter = [finalfilter ' TLim'];  case 'PNoise', finalfilter = [finalfilter ' PNoise'];  case 'Tbegin', finalfilter = [finalfilter ' Tbegin'];  case 'RI', finalfilter = [finalfilter ' RI'];  case 'RItime', finalfilter = [finalfilter ' RItime'];  case 'STFS', finalfilter = [finalfilter ' STFS'];  case 'STFSfreq', finalfilter = [finalfilter ' STFSfreq'];  case 'STFStime', finalfilter = [finalfilter ' STFStime'];  case 'EDR', finalfilter = [finalfilter ' EDR'];  case 'all', allflag = 1;break; endendif(strcmp(finalfilter, tempffilter)) if(allflag == 1)    else   finalfilter = []; endend