max v2;#N vpatcher 276 47 817 504;#N vpatcher 297 117 649 295;#P newex 280 67 50 1376265 Spat_Ctlin;#P newex 65 85 152 1376268 Spat_OPer source2;#P newex 65 115 152 1376274 fact_mem source2 my_configs;#P number 18 67 35 9 0 0 0 21;#P message 18 83 38 1376265 STORE;#P message 18 99 38 1376265 RECALL;#P comment 89 39 240 1376265 Perceptual parameters coming from midi controllers are connected simultaneously to Spat_OPer and fact_mem;#P comment 244 66 33 1376265 --- >>;#P connect 3 0 5 0;#P connect 2 0 5 0;#P connect 7 0 6 0;#P connect 7 0 5 1;#P connect 6 1 5 1;#P connect 5 0 6 0;#P connect 4 0 5 0;#P pop;#P newobj 203 391 60 1376270 p more;#P comment 267 370 250 1376265 ATTENTION: When controlled by a remote interface (like a sequencer) the Spat_OPer will not transmit perceptual parameters thru its rigth outlet. Hence \, this remote control should also be connected directly to the fact_mem right inlet. See example in patcher "more".;#P comment 27 259 13 1376268 v;#P comment 27 328 13 1376268 v;#P message 63 187 74 1376265 symbol my_room;#P comment 73 229 295 1376265 <-- stores or recalls the data associated with the current index or symbol N.B. STORE automatically writes the collection into the current file.;#P comment 139 185 226 1376265 <--selects the index or the symbol within the collection N.B. An int or symbol will not automatically retrieve data. User has to bang on RECALL.;#P comment 105 134 314 1376265 <-- reads (or writes) the contents of the collection from (or into) the current file;#P comment 213 26 296 1376265 Arguments: First : symbol that can be used to identify the source associated to a given Spat_OPer control interface (see 'Spat_OPer.help'). As well as the Spat_OPer abstraction \, it loads a user-defined variation of the OPer_init abstraction (in this example : source1-OPer_Init). Second : optional filename where the collection of configurations will be written or read.;#P comment 201 275 248 196617 Inlets and outlet: left inlet: accepts general coll syntax (see coll help) and predefined controls such as STORE or RECALL \; right inlet: data to be stored (should be connected with right outlet of Spat_OPer). outlet: retrieved data. To be connected or sent to a Spat_OPer inlet \;;#P message 27 237 38 1376265 RECALL;#P message 27 219 38 1376265 STORE;#P number 27 187 35 9 0 0 0 21;#P message 27 115 74 1376265 set new_configs;#P message 57 132 33 1376265 write;#P message 27 132 28 1376265 read;#P newex 27 280 157 1376274 fact_mem source1 my_configs;#P newex 27 351 157 1376268 Spat_OPer source1;#P comment 27 25 86 1376274 fact_mem;#P comment 27 46 168 1376265 fact_mem allows to store and recall a collection of configurations described by the high level controls of Spat_OPer. (fact_mem is based on the "coll" abstraction).;#P comment 108 116 255 1376265 <-- sets the name of the file where data will be read or written;#P comment 174 325 13 1376268 ^;#P fasten 17 0 5 0 68 256 32 256;#P connect 11 0 5 0;#P connect 10 0 5 0;#P connect 8 0 5 0;#P fasten 7 0 5 0 62 159 32 159;#P connect 6 0 5 0;#P connect 5 0 4 0;#P connect 4 1 5 1;#P connect 9 0 5 0;#P pop;